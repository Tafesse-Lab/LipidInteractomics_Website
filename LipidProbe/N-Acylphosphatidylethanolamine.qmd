---
title: "Bifunctional N-Acylphosphatidylethanolamine"
prefer-html: true
format:
  html: default
callout-icon: false
---


## Structure

:::{.border}
::: {layout="[[-0.01,99.99], [100]]"}
<!-- ![(A) Native N-Acylphosphatidylethanolamine.](/LipidProbe/Structures/PE.png) -->

![(B) Bifunctional N-Acylphosphatidylethanolamine.](/LipidProbe/Structures/BF_NAPE.png)

:::
:::

## Protein Interactome

```{r setup_and_data_wrangling, echo=FALSE, warning=FALSE, include=FALSE}
library(here)

## Opening the source file for the ggplot custom theme
source(paste0(here::here(), "/Resources/ggplot_styles.R"))

data <- readr::read_csv(paste0(here::here(), "/IndividualStudies/DataTables/DCC_2025_ChemrXiv_FilteredDataset.csv")) |> 
  group_by(gene_name) |>
  summarise(logFC = mean(logFC),
            pvalue = mean(pvalue),
            numReplicates = n()) |>
  arrange(-(numReplicates)) |>
  mutate(LipidProbe = "BF-NAPE",
         hit_annotation = case_when(numReplicates == 1 ~ "no hit",
                                    numReplicates == 2 ~ "enriched candidate",
                                    numReplicates == 3 ~ "enriched hit")) |>
  glimpse()

# Organize the hit annotations as factors
data$hit_annotation <- factor(pull(data, hit_annotation), levels = c("enriched hit", "hit", "enriched candidate", "candidate", "no hit", "NA"), ordered = TRUE)

```

::::{.callout-tip}
### Cell background: HeLa

::: {.callout-note collapse="true"}

{{< include /StudyInformation_includes/DCC_2025_include.qmd >}}

:::

#### Data visualization

::: {.panel-tabset}

##### Volcano Plot

```{r NAPE_volcano, echo=FALSE, warning=FALSE}
#| fig-cap: "Volcano plots depict the relative enrichment of each protein versus non-crosslinked control (x-axis) and the statistical significance of each protein following a Student's t-test (y-axis, -log10 transformed). Black proteins are identified in only one replicate, Purple enriched candidates are defined as proteins identified in two replicates, and Orange enriched hits are defined as proteins identified in all three replicates)."

VolcanoPlotStandardized(data)


```

##### Ranked Order Plot

```{r NAPE_RO, echo=FALSE, warning=FALSE}
#| fig-cap: "Ranked-order plots depict the relative enrichment of each protein versus non-crosslinked control (y-axis) from lowest to highest. Black proteins are identified in only one replicate, Purple enriched candidates are defined as proteins identified in two replicates, and Orange enriched hits are defined as proteins identified in all three replicates)."

RankedOrderPlotStandard(data)
```

##### Venn Diagram
```{r Venn_wrangling, include=FALSE, warning=FALSE}

###### Wrangling for the Venn Diagram ######
# Read the dataset
VennData <- readr::read_csv(paste0(here::here(), "/IndividualStudies/DataTables/DCC_2025_ChemrXiv_FilteredDataset.csv"))

# Separates out each of the genesets, then forces them back together in a vectorized list.
A_proteins <- VennData |>
  filter(Replicate == "A") |>
  dplyr::select(gene_name)

B_proteins <- VennData |>
  filter(Replicate == "B") |>
  dplyr::select(gene_name)

C_proteins <- VennData |>
  filter(Replicate == "C") |>
  dplyr::select(gene_name)

VennList <- list("Replicate A" = as.list(A_proteins$gene_name), "Replicate B" = as.list(B_proteins$gene_name), "Replicate C" = as.list(C_proteins$gene_name))
```


```{r NAPE_Venn, echo=FALSE, warning=FALSE}
#| fig-cap: "A Venn diagram depicts the overlapping identification of proteins between the three replicates. There are 88 proteins enriched uniquely in Replicate A, 75 proteins enriched uniquely in Replicate B, and 64 proteins enriched uniquely in Replicate C."

ggvenn <- ggvenn(VennList,
                      show_percentage = FALSE,
                      show_elements = FALSE,
                      fill_color = c("orange", "purple", "blue")) +
        labs(x = "", y = "") +
        theme_minimal()

ggvenn

```

:::

<!-- 
## Gene Ontology Analysis

**In beta: GO analysis still under development**

:::::{.border}
::::{#fig-PE_GOplots}
::: {.panel-tabset}

#### Cell Compartment

(No CC pathways identified among enriched hits and candidates.)

#### Molecular Function

(No MF pathways identified among enriched hits and candidates.)

#### Biological Process

(No BP pathways identified among enriched hits and candidates.)

:::

GO Dot plots display the enrichment of GO terms among the proteins enriched to the probe. For these analyses, only proteins categorized as "enriched candidates" and "enriched hits" were subject to GO analysis. The Cell Compartment analysis assesses whether the list of enriched proteins contains a statistically significant number of proteins in the same cellular region; appropriately, the Molecular Function and Biological Process analyses does the same for molecular function and biological process, respectively. [Click here for more information about Gene Ontology analysis.](/Background/DataAnalysisAndStatistics.qmd#gene-ontology-overview)

::::
::::: -->

#### Data exploration and download

Check the boxes below to filter the dataset by which lipid probe was used in the pulldown and by significance thresholds.

:::{.border}
```{r NAPE_DataTable, echo=FALSE, warning=FALSE}

# Here is the code to make the filterable lists shown in the crosstalk table below

data <- data |>
  dplyr::select(gene_name, LipidProbe, hit_annotation, logFC, pvalue, numReplicates) |>
  mutate(logFC = signif(logFC, digits=3),
          pvalue = signif(pvalue, digits=3)) |>
  arrange(-logFC) |>
  arrange(hit_annotation)

## Creates a reactive dataframe
data_reactive <- crosstalk::SharedData$new(data)

htmltools::tags$div(
  class = "filter-container",
  filter_checkbox(id = "LipidProbe",
                  label = "Lipid probe in pulldown:", 
                  sharedData = data_reactive,
                  group = ~LipidProbe),
  filter_checkbox(id = "hit_annotation",
                  label = "Enrichment criteria:", 
                  sharedData = data_reactive,
                  group = ~hit_annotation)
)

## Displays the reactive dataframe
datatable(data_reactive, 
          options = list(pageLength = 15),
                         colnames = c("Gene Name", "Lipid Probe", "Hit Annotation", "LogFC", "p value", "FDR"),
                         rownames=FALSE)

```
:::

<br>

{{< downloadthis DataSets/DCC_2025_ChemrXiv_FilteredDataset.csv dname="DCC_2025_ChemrXiv_FilteredDataset">}}

::::
