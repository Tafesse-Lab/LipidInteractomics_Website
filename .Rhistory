ggplot(sd, aes(x = name, y = mean, fill = name), color = "black") +
geom_bar(stat = "identity", linewidth = 1, color = "black") +
geom_errorbar(aes(x = name, ymin = mean - sd, ymax = mean + sd), width = 0.25, linewidth = 1) +
scale_fill_manual(values = c("#aeadae", "#8383bf", "#8383bf", "#8383bf", "#8383bf"), labels = labels) +
scale_y_continuous(expand = c(0, 0), breaks = c(0, 50, 100), limits = c(0, 110)) +
scale_x_discrete(labels = labels) +
labs(x = "", y = "SM synthase activity \n(%of N2)") +
theme_classic() +
theme(legend.position = "none",
text = element_text(size = 16),
axis.text = element_text(size = 16),
axis.line = element_line(size = 1),
axis.ticks.length.y = unit(.25, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y=element_text(margin=margin(r=1)))
ggplot(sd, aes(x = name, y = mean, fill = name), color = "black") +
geom_bar(stat = "identity", linewidth = 1, color = "black") +
geom_errorbar(aes(x = name, ymin = mean - sd, ymax = mean + sd), width = 0.25, linewidth = 1) +
scale_fill_manual(values = c("#aeadae", "#8383bf", "#8383bf", "#8383bf", "#8383bf"), labels = labels) +
scale_y_continuous(expand = c(0, 0), breaks = c(0, 50, 100), limits = c(0, 110)) +
scale_x_discrete(labels = labels) +
labs(x = "", y = "SM synthase activity \n(%of N2)") +
theme_classic() +
theme(legend.position = "none",
text = element_text(size = 16),
axis.text = element_text(size = 16),
axis.line = element_line(size = 1),
axis.ticks.length.y = unit(.25, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y=element_text(margin=margin(r=-1)))
ggplot(sd, aes(x = name, y = mean, fill = name), color = "black") +
geom_bar(stat = "identity", linewidth = 1, color = "black") +
geom_errorbar(aes(x = name, ymin = mean - sd, ymax = mean + sd), width = 0.25, linewidth = 1) +
scale_fill_manual(values = c("#aeadae", "#8383bf", "#8383bf", "#8383bf", "#8383bf"), labels = labels) +
scale_y_continuous(expand = c(0, 0), breaks = c(0, 50, 100), limits = c(0, 110)) +
scale_x_discrete(labels = labels) +
labs(x = "", y = "SM synthase activity \n(%of N2)") +
theme_classic() +
theme(legend.position = "none",
text = element_text(size = 16),
axis.text = element_text(size = 16),
axis.line = element_line(size = 1),
axis.ticks.length.y = unit(.25, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y=element_text(margin=margin(r=-10)))
ggplot(sd, aes(x = name, y = mean, fill = name), color = "black") +
geom_bar(stat = "identity", linewidth = 1, color = "black") +
geom_errorbar(aes(x = name, ymin = mean - sd, ymax = mean + sd), width = 0.25, linewidth = 1) +
scale_fill_manual(values = c("#aeadae", "#8383bf", "#8383bf", "#8383bf", "#8383bf"), labels = labels) +
scale_y_continuous(expand = c(0, 0), breaks = c(0, 50, 100), limits = c(0, 110)) +
scale_x_discrete(labels = labels) +
labs(x = "", y = "SM synthase activity \n(%of N2)") +
theme_classic() +
theme(legend.position = "none",
text = element_text(size = 16),
axis.text = element_text(size = 16),
axis.line = element_line(size = 1),
axis.ticks.length.y = unit(.25, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y=element_text(margin=margin(r=-10)))
N2vtm2660
N2vtm2613
N2v60x13
shiny::runApp('Desktop/TrifunctionalProteomics-DataViewer')
runApp('Desktop/TrifunctionalProteomics-DataViewer')
getwd()
UV_results_Read <-read_csv("UV_results_FULL.csv")
runApp('Desktop/TrifunctionalProteomics-DataViewer')
runApp('Desktop/TrifunctionalProteomics-DataViewer')
data2
library(ggplot2)
library(emojifont)
library(dplyr)
library(tidyr)
library(extrafont)
Worm <- c("N2", "ΔceSMSα, ΔceSMSβ clone #1", "ΔceSMSα, ΔceSMSβ clone #2", "D", "E", "F")
PE <- c(40.92266707,	42.22288905,	37.12745462,	40.98815695,	39.68140971, 39.0438304)
PC <- c(48.70354013,	48.6224465,	52.65749254,	46.78594802,	50.621457, 50.48298257)
SM <- c(9.238959234,	7.58859895,	8.17970929,	10.33942412,	7.916679402, 8.707736971)
Cer <- c(0.575546861,	1.090494261,	1.478715734,	1.299069083,	1.325675067, 1.265789583)
EPC <- c(0.207694909,	0.077778154,	0.091541914,	0.11256747,	0.065494888, 0.076652132)
GlcCer <- c(0.351591795,	0.397793088,	0.465085901,	0.474834351,	0.389283939, 0.42300835)
data2 <- data.frame(Worm, PE, PC, SM, Cer, EPC, GlcCer) |>
pivot_longer(cols = c(2:7)) |>
arrange(name) |>
group_by(name) |>
filter(name != "EPC") |>
filter(Worm == "N2" | Worm == "ΔceSMSα, ΔceSMSβ clone #1" | Worm == "ΔceSMSα, ΔceSMSβ clone #2") |>
mutate(genotype = case_when(Worm == "N2" ~ "N2",
Worm == "ΔceSMSα, ΔceSMSβ clone #1" ~ "ΔceSMSα, ΔceSMSβ clone #1",
Worm == "ΔceSMSα, ΔceSMSβ clone #2" ~ "ΔceSMSα, ΔceSMSβ clone #2"))
data2
data2 <- data.frame(Worm, PE, PC, SM, Cer, EPC, GlcCer) |>
pivot_longer(cols = c(2:7)) |>
arrange(name) |>
group_by(name) |>
filter(name != "EPC") |>
filter(Worm == "N2" | Worm == "ΔceSMSα, ΔceSMSβ clone #1" | Worm == "ΔceSMSα, ΔceSMSβ clone #2") |>
mutate(genotype = case_when(Worm == "N2" ~ "N2",
Worm == "ΔceSMSα, ΔceSMSβ clone #1" ~ "ΔceSMSα, ΔceSMSβ clone #1",
Worm == "ΔceSMSα, ΔceSMSβ clone #2" ~ "ΔceSMSα, ΔceSMSβ clone #2")) |>
mutate(LipidClass == name)
data2 <- data.frame(Worm, PE, PC, SM, Cer, EPC, GlcCer) |>
pivot_longer(cols = c(2:7)) |>
arrange(name) |>
group_by(name) |>
filter(name != "EPC") |>
filter(Worm == "N2" | Worm == "ΔceSMSα, ΔceSMSβ clone #1" | Worm == "ΔceSMSα, ΔceSMSβ clone #2") |>
mutate(genotype = case_when(Worm == "N2" ~ "N2",
Worm == "ΔceSMSα, ΔceSMSβ clone #1" ~ "ΔceSMSα, ΔceSMSβ clone #1",
Worm == "ΔceSMSα, ΔceSMSβ clone #2" ~ "ΔceSMSα, ΔceSMSβ clone #2")) |>
mutate(LipidClass = name)
summary_data2 <- data2 |>
group_by(name, genotype) |>
summarise(mean = mean(value))
data2$name <- factor(pull(data2, name), ordered = TRUE, levels = c("SM", "Cer", "GlcCer", "PC",  "PE", "EPC"))
summary_data2$name <- factor(pull(summary_data2, name), ordered = TRUE, levels = c("SM", "Cer", "GlcCer", "PC",  "PE", "EPC"))
data2
data3 <- data2 |>
select(genotype, LipidClass, value)
data3
data3 <- data2 |>
ungroup() |>
select(genotype, LipidClass, value)
data3
data3 <- data2 |>
ungroup() |>
select(genotype, LipidClass, value) |>
arrange(genotype)
data3
library(here)
here()
write_csv(data3, paste0(here(), "/Downloads/Celegans_lipidomics.csv"))
write.csv(data3, paste0(here(), "/Downloads/Celegans_lipidomics.csv"))
0.575546861 / 1.090494261
0.575546861 / 1.478715734
0.351591795 / 0.397793088
0.351591795 / 0.465085901
1.090494261 / 0.575546861
1.478715734 / 0.575546861
0.397793088 / 0.351591795
0.465085901 / 0.351591795
## intitialize libraries
library(here)
#######################################
#' The purpose of this R script is to re-run the GO plotting functions and re-render all of the plots displayed on the IndividualStudies and LipidProbe pages.
#' Saves a ton of time in each render because these functions take a while to run.
#' Uncomment some or all of the sections below if any changes to the plotting functions are made.
#' Add new sections for new datasets using the frameworks below.
#######################################
## intitialize libraries
library(here)
library(dplyr)
library(tidyr)
library(readr)
library(crosstalk)
## Opening the source file for the ggplot custom theme
source(paste0(here(), "/Resources/ggplot_styles.R"))
## Opening the source file for the ggplot custom theme
source(paste0(here(), "/Resources/ggplot_styles.R"))
library(here)
library(dplyr)
library(tidyr)
library(readr)
library(crosstalk)
here()
setwd("~/LipidInteractomics_Website_local/LipidInteractomics_Website")
# Sphingosine
Sph_data <- readr::read_csv(paste0(here(), "/LipidProbe/DataSets/Sph_Huh7_SF_2024.csv")) |>
filter(LipidProbe == "Sph")
get_wd()
getwd()
#######################################
#' The purpose of this R script is to re-run the GO plotting functions and re-render all of the plots displayed on the IndividualStudies and LipidProbe pages.
#' Saves a ton of time in each render because these functions take a while to run.
#' Uncomment some or all of the sections below if any changes to the plotting functions are made.
#' Add new sections for new datasets using the frameworks below.
#######################################
## intitialize libraries
library(here)
library(dplyr)
library(tidyr)
library(readr)
library(crosstalk)
## Opening the source file for the ggplot custom theme
source(paste0( "/Resources/ggplot_styles.R"))
#######################################
#' The purpose of this R script is to re-run the GO plotting functions and re-render all of the plots displayed on the IndividualStudies and LipidProbe pages.
#' Saves a ton of time in each render because these functions take a while to run.
#' Uncomment some or all of the sections below if any changes to the plotting functions are made.
#' Add new sections for new datasets using the frameworks below.
#######################################
## intitialize libraries
library(here)
library(dplyr)
library(tidyr)
library(readr)
library(crosstalk)
## Opening the source file for the ggplot custom theme
source(paste0(getwd(),  "/Resources/ggplot_styles.R"))
# Sphingosine
Sph_data <- readr::read_csv(paste0(getwd(),  "/LipidProbe/DataSets/Sph_Huh7_SF_2024.csv")) |>
filter(LipidProbe == "Sph")
CC_enrichment_plots(Sph_data, "dot", "/LipidProbe/GO_plots/Sph_SF_2024_CC-DOTplot")
shiny::runApp('~/KRT_DataViewer/KRT_Viewer')
shiny::runApp('ShinyApps/CompareLipidProbes')
source("combinedProbeDatasets_TMT.csv")
setwd("~/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(readr)
library(shiny)
library(duckplyr)
library(shinycssloaders)
# Load plotting function source
# source("/Users/gaelenguzman/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes/PlottingFunction.R")
# # File path for testing
# df <- read_csv("/Users/gaelenguzman/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes/combinedProbeDatasets_TMT.csv") |>
#     mutate(probeOptions = paste0(LipidProbe, " - ", CellLine))
# File path for deploying to Shinyapps.io
source("combinedProbeDatasets_TMT.csv")
source("combinedProbeDatasets_TMT.csv")
source("/Users/gaelenguzman/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes/PlottingFunction.R")
df <- read_csv("/Users/gaelenguzman/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes/combinedProbeDatasets_TMT.csv") |>
mutate(probeOptions = paste0(LipidProbe, " - ", CellLine))
df
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(readr)
library(shiny)
library(duckplyr)
library(shinycssloaders)
# Load plotting function source
# source("/Users/gaelenguzman/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes/PlottingFunction.R")
# # File path for testing
df <- read_csv("/Users/gaelenguzman/LipidInteractomics_Website_local/LipidInteractomics_Website/ShinyApps/CompareLipidProbes/combinedProbeDatasets_TMT.csv") |>
mutate(probeOptions = paste0(LipidProbe, " - ", CellLine))
# File path for deploying to Shinyapps.io
# source("combinedProbeDatasets_TMT.csv")
#
# df <- read_csv("combinedProbeDatasets_TMT.csv") |>
#   mutate(probeOptions = paste0(LipidProbe, " - ", CellLine))
probeOptions <- unique(df$probeOptions)
########################################################
# UI
ui <- fluidPage(
titlePanel("Interactive LogFC Comparison"),
sidebarLayout(
sidebarPanel(
selectInput(
"probe1",
"Select First LipidProbe:",
choices = probeOptions,
selected = probeOptions[1]
),
selectInput(
"probe2",
"Select Second LipidProbe:",
choices = probeOptions,
selected = probeOptions[2]
)
),
mainPanel(
withSpinner(plotlyOutput("logFCPlot")),
)
)
)
########################################################
# Server
server <- function(input, output, session) {
# Creating filtered datasets for the probes selected
xData <- reactive({
xData <- df |>
filter(probeOptions == input$probe1)
return(xData)
})
yData <- reactive({
yData <- df |>
filter(probeOptions == input$probe2)
return(yData)
})
# The output call for making the plot - includes some data wrangling to make sure the selected probes are handled properly. A
## Also makes the linear regression line to add to the plot.
output$logFCPlot <- renderPlotly({
# Isolating the probes selected by the user
probe1Name <- input$probe1
probe2Name <- input$probe2
# Create a new dataframe for plotting
xData <- xData()
yData <- yData()
# handles the NAs by placing them on the appropriate axes.
plot_data <- full_join(xData, yData, by = "gene_name") |>
mutate(logFC.x = if_else(is.na(logFC.x), 0, logFC.x)) |>
mutate(logFC.y = if_else(is.na(logFC.y), 0, logFC.y)) |>
mutate(
hit_annotation.x = if_else(
is.na(hit_annotation.x),
"no hit",
hit_annotation.x
)
) |>
mutate(
hit_annotation.y = if_else(
is.na(hit_annotation.y),
"no hit",
hit_annotation.y
)
) |>
mutate(
combined_hit_annotation = case_when(
hit_annotation.x == "enriched hit" &
hit_annotation.y == "enriched hit" ~
"enriched on both axes",
hit_annotation.x != "enriched hit" &
hit_annotation.y == "enriched hit" ~
"enriched y-axis only",
hit_annotation.x == "enriched hit" &
hit_annotation.y != "enriched hit" ~
"enriched x-axis only",
.default = "enriched on neither axis"
)
) |>
mutate_if(is.numeric, ~ replace(., is.na(.), 0)) |>
mutate_if(is.character, ~ replace(., is.na(.), "no id")) |>
arrange(combined_hit_annotation)
plot_data$combined_hit_annotation <- factor(
pull(plot_data, combined_hit_annotation),
levels = c(
"enriched on both axes",
"enriched x-axis only",
"enriched y-axis only",
"enriched on neither axis"
),
ordered = TRUE
)
ProbeVSProbePlotter(plot_data, probe1Name, probe2Name)
})
output$logFCPlot3dDemo <- renderPlotly({
# Isolating the probes selected by the user
probe1Name <- input$probe1
probe2Name <- input$probe2
probe3Name <- input$probe3
# Create a new dataframe for plotting
xData <- xData()
yData <- yData()
zData <- zData()
# handles the NAs by placing them on the appropriate axes.
plot_data <- xData |>
full_join(yData, by = "gene_name") |>
full_join(zData, by = "gene_name") |>
mutate(logFC.z = logFC, hit_annotation.z = hit_annotation) |>
mutate(logFC.x = if_else(is.na(logFC.x), 0, logFC.x)) |>
mutate(logFC.y = if_else(is.na(logFC.y), 0, logFC.y)) |>
mutate(logFC.z = if_else(is.na(logFC.z), 0, logFC.z)) |>
mutate(
hit_annotation.x = if_else(
is.na(hit_annotation.x),
"no hit",
hit_annotation.x
)
) |>
mutate(
hit_annotation.y = if_else(
is.na(hit_annotation.y),
"no hit",
hit_annotation.y
)
) |>
mutate(
hit_annotation.z = if_else(
is.na(hit_annotation.z),
"no hit",
hit_annotation.z
)
) |>
mutate(
combined_hit_annotation = case_when(
hit_annotation.x == "enriched hit" &
hit_annotation.y == "enriched hit" ~
"enriched on x- and y- axes",
hit_annotation.x == "enriched hit" &
hit_annotation.y == "enriched hit" &
hit_annotation.z != "enriched hit" ~
"enriched on x- and y- axes",
hit_annotation.x == "enriched hit" &
hit_annotation.y != "enriched hit" &
hit_annotation.z == "enriched hit" ~
"enriched on x- and z- axes",
hit_annotation.x != "enriched hit" &
hit_annotation.y == "enriched hit" &
hit_annotation.z == "enriched hit" ~
"enriched on y- and z- axes",
hit_annotation.x != "enriched hit" &
hit_annotation.y == "enriched hit" &
hit_annotation.z != "enriched hit" ~
"enriched y-axis only",
hit_annotation.x == "enriched hit" &
hit_annotation.y != "enriched hit" &
hit_annotation.z != "enriched hit" ~
"enriched x-axis only",
hit_annotation.x != "enriched hit" &
hit_annotation.y != "enriched hit" &
hit_annotation.z == "enriched hit" ~
"enriched z-axis only",
hit_annotation.x == "enriched hit" &
hit_annotation.y == "enriched hit" &
hit_annotation.z == "enriched hit" ~
"enriched on all axes",
.default = "enriched on no axes"
)
) |>
mutate_if(is.numeric, ~ replace(., is.na(.), 0)) |>
mutate_if(is.character, ~ replace(., is.na(.), "no id")) |>
arrange(combined_hit_annotation)
plot_data$combined_hit_annotation <- factor(
pull(plot_data, combined_hit_annotation),
levels = c(
"enriched on all axes",
"enriched on x- and y- axes",
"enriched on x- and z- axes",
"enriched on y- and z- axes",
"enriched x-axis only",
"enriched y-axis only",
"enriched z-axis only",
"enriched on no axes"
),
ordered = TRUE
)
# Corrected opacity mapping (now properly ordered)
plot_data$opacity <- case_when(
plot_data$combined_hit_annotation == "enriched on all axes" ~ 0.25,
plot_data$combined_hit_annotation %in%
c(
"enriched on x- and y- axes",
"enriched on x- and z- axes",
"enriched on y- and z- axes"
) ~
0.5,
plot_data$combined_hit_annotation %in%
c(
"enriched x-axis only",
"enriched y-axis only",
"enriched z-axis only"
) ~
0.75,
plot_data$combined_hit_annotation == "enriched on no axes" ~ 1.0,
TRUE ~ 0.75 # Default case
)
# Define color mapping similar to ggplot
color_mapping <- c(
"enriched on all axes" = "orange",
"enriched on x- and y- axes" = "purple",
"enriched on x- and z- axes" = "blue",
"enriched on y- and z- axes" = "green",
"enriched x-axis only" = "red",
"enriched y-axis only" = "cyan",
"enriched z-axis only" = "magenta",
"enriched on no axes" = "gray75"
)
# Create 3D scatter plot
plot_ly(
data = plot_data,
x = ~logFC.x,
y = ~logFC.y,
z = ~logFC.z,
color = ~combined_hit_annotation,
colors = color_mapping,
type = "scatter3d",
mode = "markers",
marker = list(
size = 5
),
opacity = ~opacity,
text = ~ paste(
"Gene:",
gene_name,
"<br>",
probe1Name,
"logFC:",
round(logFC.x, 2),
"<br>",
probe2Name,
"logFC",
round(logFC.y, 2),
"<br>",
probe3Name,
"logFC:",
round(logFC.z, 2)
),
hoverinfo = "text"
) %>%
layout(
scene = list(
xaxis = list(title = probe1Name),
yaxis = list(title = probe2Name),
zaxis = list(title = probe3Name)
),
legend = list(title = list(text = "Hit Annotation"))
)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
df <- read_csv("combinedProbeDatasets_TMT.csv") |>
mutate(probeOptions = paste0(LipidProbe, " - ", CellLine))
df
