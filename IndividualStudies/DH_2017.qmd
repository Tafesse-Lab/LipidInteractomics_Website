---
title: "HÃ¶glinger et al. 2017"
subtitle: "Trifunctional lipid probes for comprehensive studies of single lipid species in living cells"
format:
  html:
    embed-resources: false
standalone: false
---
<!-- R setup, reading data tables, wrangling data -->
```{r setup, echo=FALSE, include=FALSE, warning=FALSE}

## intitialize libraries
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(grid)
library(readr)
library(rmarkdown)
library(emojifont)
library(gt)
library(crosstalk)
library(DT)
library(stringr)
library(here)
library(heatmaply)
library(ggvenn)
library(scales)

## Opening the source file for the ggplot custom theme
source(paste0(here(), "/Resources/ggplot_styles.R"))

###### Wrangling the raw dataset ######
DH_2017_data <- read.csv(paste0(here(),"/IndividualStudies/DataTables/DH_PNAS_2017_download.csv")) |>
  mutate(gene_name = str_extract(Description, "GN=([^\\s]+)") |> str_remove("GN=")) |>
  mutate(Species = str_extract(Description, "OS=([^=]+?)\\sGN=") |> str_remove("OS=") |> str_remove("GN=")) |>
  filter(Species == "Homo sapiens ") |>
  mutate(PSM_Sph = (PSM_Sph1 + PSM_Sph2) / 2,
         PSM_FA = (PSM_FA1 + PSM_FA2) / 2,
         PSM_DAG = (PSM_DAG1 + PSM_DAG2) /2) |>
  dplyr::select(gene_name, PSM_Sph, PSM_FA, PSM_DAG) |>
  arrange(gene_name) |>
  group_by(gene_name) |>
  summarise(PSM_DAG = mean(PSM_DAG),
            PSM_FA = mean(PSM_FA),
            PSM_Sph = mean(PSM_Sph))


###### Wrangling for the DataTable and the GO ######

DH_2017_data <- DH_2017_data |>
  mutate(VennRegion = case_when(
    (PSM_Sph > 0 & PSM_DAG > 0 & PSM_FA > 0) ~ "Enriched to all probes",
    (PSM_Sph > 0 & PSM_DAG == 0 & PSM_FA == 0) ~ "Enriched to Sph only",
    (PSM_Sph == 0 & PSM_DAG > 0 & PSM_FA == 0) ~ "Enriched to DAG only",
    (PSM_Sph == 0 & PSM_DAG == 0 & PSM_FA > 0) ~ "Enriched to FA only",
    (PSM_Sph > 0 & PSM_DAG > 0 & PSM_FA == 0) ~ "Enriched to Sph and DAG",
    (PSM_Sph > 0 & PSM_DAG == 0 & PSM_FA > 0) ~ "Enriched to Sph and FA",
    (PSM_Sph == 0 & PSM_DAG > 0 & PSM_FA > 0) ~ "Enriched to DAG and FA")) 

DH_2017_data$VennRegion <- factor(pull(DH_2017_data, VennRegion), ordered = TRUE, levels = c("Enriched to Sph only", "Enriched to DAG only", "Enriched to FA only", "Enriched to Sph and DAG", "Enriched to Sph and FA", "Enriched to DAG and FA", "Enriched to all probes"))


###### Wrangling for the HeatMap ######

DH_2017_data_HeatMap <- DH_2017_data |>
  pivot_longer(cols = starts_with("PSM_"),
              names_to = "variable",
              names_prefix = "PSM_",
              values_to = "value") |>
  mutate(name = gene_name) |>
  dplyr::select(name, variable, value)

DH_2017_data_HeatMap$variable <- factor(pull(DH_2017_data_HeatMap, variable), ordered = TRUE, levels = c("Sph", "FA", "DAG"))

###### Wrangling for the Venn Diagram ######

# Separates out each of the genesets, then forces them back together in a vectorized list.
Sph_proteins <- DH_2017_data |>
  filter(PSM_Sph > 0) |>
  dplyr::select(gene_name)

FA_proteins <- DH_2017_data |>
  filter(PSM_FA > 0) |>
  dplyr::select(gene_name)

DAG_proteins <- DH_2017_data |>
  filter(PSM_DAG > 0) |>
  dplyr::select(gene_name)

DH_2017_VennData <- list("Sph proteins" = as.list(Sph_proteins$gene_name), "FA proteins" = as.list(FA_proteins$gene_name), "DAG proteins" = as.list(DAG_proteins$gene_name))

```


::: {.callout-note collapse="true"}

{{< include /StudyInformation_includes/DH_2017_include.qmd >}}

:::

## Data visualization

#### Heat map

Depicted below are the average PSM count for two replicates each of UV-irradiated samples treated with trifunctionalized Sph, DAG, and FA.

:::{.border}

```{r Making Heat Map, echo=FALSE, fig.height=10, warning=FALSE}

# Create the heatmap
heatmaply(long_data = DH_2017_data_HeatMap,
          xlab = "Probe",
          ylab = "Gene name",
          label_names = c("Gene name", "Probe", "PSM count"),
          scale_fill_gradient_fun = ggplot2::scale_fill_gradientn(colours = c("grey95", "purple", "orange", "orange", "orange", "orange", "orange", "red", "red","red"), breaks = c(0, 5, 20, 200)),
          showticklabels = F)

```
:::

<hr>

#### Venn Diagram

:::{.border}

```{r Making Venn Diagram, echo=FALSE, warning=FALSE, width = 8}


ggvenn <- ggvenn(DH_2017_VennData,
                      show_percentage = FALSE,
                      show_elements = FALSE,
                      fill_color = c("orange", "purple", "blue")) +
        labs(x = "", y = "") +
        theme_minimal()

ggvenn

```

:::

## Gene Ontology Analysis

```{r GO data wrangling, echo=FALSE, warning=FALSE}

# ID_LUT <- clusterProfiler::bitr(geneID= DH_2017_data$gene_name, 
#                                 fromType = "SYMBOL",
#                                 toType = "ENTREZID",
#                                 OrgDb = org.Hs.eg.db
# )

# names(ID_LUT) <- c("gene_name", "ENTREZID")

# # Merging ENTREZIDs to data
# DH_2017_data_GO <- left_join(DH_2017_data, ID_LUT)

# ego_results_Identification_CC <- NULL

# # Attempts to identify pathways in the dataset
# try(
#   ego_results_Identification_CC <- clusterProfiler::compareCluster(ENTREZID ~ VennRegion,
#                                     data = DH_2017_data_GO, fun = "enrichGO",
#                                     OrgDb = org.Hs.eg.db,
#                                     keyType = "ENTREZID",
#                                     ont = "CC",
#                                     readable = TRUE,
#                                     universe = ID_LUT$ENTREZID)
#                                     ) 

# # If no pathway identified, returns text warning user.
# if (is.null(ego_results_Identification_CC)) {
#   print("No pathways identified among enriched hits and candidates.")
# }

# # If pathways identified, produces both plots for viewing.
# if (!is.null(ego_results_Identification_CC))
#   {
#   ego_results_Identification_CC_table <- ego_results_Identification_CC@compareClusterResult
#   ego_results_Identification_CC_table <- ego_results_Identification_CC_table %>% 
#     group_by(ID, VennRegion) %>%
#     mutate(odds_ratio = calculateFE(GeneRatio, BgRatio))
#   ego_results_Identification_CC_table$Description <- factor(ego_results_Identification_CC_table$Description, levels = unique(rev(ego_results_Identification_CC_table$Description)))

#   ego_sub <- ego_results_Identification_CC_table %>% 
#     group_by(VennRegion) %>%
#     slice_head(n = 10)

#   # Makes the dot plot
#   dot <- ggplot(data = ego_sub, aes(VennRegion, Description)) +
#     geom_point(aes(size = odds_ratio, colour = -log10(p.adjust))) +
#     theme_bw(base_size = 12) +
#     scale_colour_gradientn(colours = c("#377eb8", "#984ea3", "#e41a1c", "#ff7f00", "#ffff33"), ) +
#     # ggtitle("Cellular compartment") +
#     ylab("") +
#     xlab("Enrichment Profile") +
#     theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))

#   dot <- ggplotly(dot)
#   # Save as HTML (adjust the path as needed)
#   saveWidget(dot, file = paste0(here(), "/IndividualStudies/GO_plots/DH_2017_CC_DOTPLOT.html"), selfcontained = TRUE)

#   try(
# 			# Makes the cnet plot
#     cnet <- clusterProfiler::cnetplot(ego_results_Identification_CC, categorySize = "pvalue") +
#       # ggtitle("Cellular compartment") +
#         customPlot
#     )

#   if(!is.null(cnet)){
#       ggsave(paste0(here(), "/IndividualStudies/GO_plots/DH_2017_CC_CNET.png"),
#            width = 12, height = 12)
#   } else {
#     print("Cnet plot failed in production.")
#   }
# }

# ego_results_Identification_MF <- NULL

# # Attempts to identify pathways in the dataset
# try(
#   ego_results_Identification_MF <- clusterProfiler::compareCluster(ENTREZID ~ VennRegion,
#                                     data = DH_2017_data_GO, fun = "enrichGO",
#                                     OrgDb = org.Hs.eg.db,
#                                     keyType = "ENTREZID",
#                                     ont = "MF",
#                                     readable = TRUE,
#                                     universe = ID_LUT$ENTREZID)
#                                     ) 

# # If no pathway identified, returns text warning user.
# if (is.null(ego_results_Identification_MF)) {
#   print("No pathways identified among enriched hits and candidates.")
# }

# # If pathways identified, produces both plots for viewing.
# if (!is.null(ego_results_Identification_MF))
#   {
  # ego_results_Identification_MF_table <- ego_results_Identification_MF@compareClusterResult
  # ego_results_Identification_MF_table <- ego_results_Identification_MF_table %>% 
  #   group_by(ID, VennRegion) %>%
  #   mutate(odds_ratio = calculateFE(GeneRatio, BgRatio))
  # ego_results_Identification_MF_table$Description <- factor(ego_results_Identification_MF_table$Description, levels = unique(rev(ego_results_Identification_MF_table$Description)))

  # ego_sub <- ego_results_Identification_MF_table %>% 
  #   group_by(VennRegion) %>%
  #   slice_head(n = 10)

  # # Makes the dot plot
  # dot <- ggplot(data = ego_sub, aes(VennRegion, Description)) +
  #   geom_point(aes(size = odds_ratio, colour = -log10(p.adjust))) +
  #   theme_bw(base_size = 12) +
  #   scale_colour_gradientn(colours = c("#377eb8", "#984ea3", "#e41a1c", "#ff7f00", "#ffff33"), ) +
  #   # ggtitle("Cellular compartment") +
  #   ylab("") +
  #   xlab("Enrichment Profile") +
  #   theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))

  # dot <- ggplotly(dot)
  # # Save as HTML (adjust the path as needed)
  # saveWidget(dot, file = paste0(here(), "/IndividualStudies/GO_plots/DH_2017_MF_DOTPLOT.html"), selfcontained = TRUE)

#   try(
# 			# Makes the cnet plot
#     cnet <- clusterProfiler::cnetplot(ego_results_Identification_MF, categorySize = "pvalue") +
#       # ggtitle("Cellular compartment") +
#         customPlot
#     )

#   if(!is.null(cnet)){
#       ggsave(paste0(here(), "/IndividualStudies/GO_plots/DH_2017_MF_CNET.png"),
#            width = 12, height = 12)
#   } else {
#     print("Cnet plot failed in production.")
#   }
# }

# ego_results_Identification_BP <- NULL

# # Attempts to identify pathways in the dataset
# try(
#   ego_results_Identification_BP <- clusterProfiler::compareCluster(ENTREZID ~ VennRegion,
#                                     data = DH_2017_data_GO, fun = "enrichGO",
#                                     OrgDb = org.Hs.eg.db,
#                                     keyType = "ENTREZID",
#                                     ont = "BP",
#                                     readable = TRUE,
#                                     universe = ID_LUT$ENTREZID)
#                                     ) 

# # If no pathway identified, returns text warning user.
# if (is.null(ego_results_Identification_BP)) {
#   print("No pathways identified among enriched hits and candidates.")
# }

# If pathways identified, produces both plots for viewing.
# if (!is.null(ego_results_Identification_BP))
#   {
#   ego_results_Identification_BP_table <- ego_results_Identification_BP@compareClusterResult
#   ego_results_Identification_BP_table <- ego_results_Identification_BP_table %>% 
#     group_by(ID, VennRegion) %>%
#     mutate(odds_ratio = calculateFE(GeneRatio, BgRatio))
#   ego_results_Identification_BP_table$Description <- factor(ego_results_Identification_BP_table$Description, levels = unique(rev(ego_results_Identification_BP_table$Description)))

#   ego_sub <- ego_results_Identification_BP_table %>% 
#     group_by(VennRegion) %>%
#     slice_head(n = 10)

#   # Makes the dot plot
#   dot <- ggplot(data = ego_sub, aes(VennRegion, Description)) +
#     geom_point(aes(size = odds_ratio, colour = -log10(p.adjust))) +
#     theme_bw(base_size = 12) +
#     scale_colour_gradientn(colours = c("#377eb8", "#984ea3", "#e41a1c", "#ff7f00", "#ffff33"), ) +
#     # ggtitle("Cellular compartment") +
#     ylab("") +
#     xlab("Enrichment Profile") +
#     theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))

#   dot <- ggplotly(dot)
#   # Save as HTML (adjust the path as needed)
#   saveWidget(dot, file = paste0(here(), "/IndividualStudies/GO_plots/DH_2017_BP_DOTPLOT.html"), selfcontained = TRUE)

#   try(
# 			# Makes the cnet plot
#     cnet <- clusterProfiler::cnetplot(ego_results_Identification_BP, categorySize = "pvalue") +
#       # ggtitle("Cellular compartment") +
#         customPlot
#     )

#   if(!is.null(cnet)){
#       ggsave(paste0(here(), "/IndividualStudies/GO_plots/DH_2017_BP_CNET.png"),
#            width = 12, height = 12)
#   } else {
#     print("Cnet plot failed in production.")
#   }
# }
```

**In beta: GO analysis still under development**

:::: {.panel-tabset}

#### Cell Compartment
:::{.border}
<iframe src="/IndividualStudies/GO_plots/DH_2017_CC_DOTPLOT.html" width="100%" height="500px"></iframe>

:::

#### Molecular Function
:::{.border}
<iframe src="/IndividualStudies/GO_plots/DH_2017_MF_DOTPLOT.html" width="100%" height="500px"></iframe>

:::

#### Biological Process
:::{.border}
<iframe src="/IndividualStudies/GO_plots/DH_2017_BP_DOTPLOT.html" width="100%" height="500px"></iframe>

:::
::::

:::{.border}
```{r Building Datatable, echo=FALSE, warning=FALSE}
DH_2017_data_reactive <- crosstalk::SharedData$new(DH_2017_data)


htmltools::tags$div(
  class = "filter-container",
  filter_checkbox(id = "Overlap",
                  label = "Select overlap regions to see co-enriched proteins:",
                  sharedData = DH_2017_data_reactive,
                  group = ~VennRegion,
                  inline = TRUE)
)

## Displays the reactive dataframe
datatable(DH_2017_data_reactive, options = list(pageLength = 20))
```

:::

## Data download

{{< downloadthis DataTables/DH_PNAS_2017_download.csv dname="DH_PNAS_2017">}}


