---
title: "Kundu et al. 2024"
subtitle: "Investigation of Glycosylphosphatidylinositol (GPI)‚ÄêPlasma Membrane Interaction in Live Cells and the Influence of GPI Glycan Structure on the Interaction"
date: 2024-02-07
format: 
  html:
    embed-resources: false
standalone: false
---

::: {.callout-note collapse="true"}

{{< include /StudyInformation_includes/SK_2024_include.qmd >}}

:::

```{r Setup, include=FALSE, echo=FALSE}
library(here)

## Opening the source file for the ggplot custom theme
source(here::here("Resources/ggplot_styles.R"))

```

```{r AddingToSearchByProteinPage, include=FALSE, echo=FALSE}

# data <- readr::read_csv(here::here("IndividualStudies/DataTables/SK_2024_ChemEuro.csv")) |>
#   dplyr::select(LipidProbe, gene_name, logFC, pvalue, hit_annotation) |>
#   glimpse()

# CombinedProbeData <- read_csv(here("ShinyApps/LipidInteractomics_ShinyApp/combinedProbeDatasets_TMT.csv")) |>
#   dplyr::select(-`...1`) |>
#   glimpse() |>
#   rbind(data)

# write_csv(CombinedProbeData, here("ShinyApps/LipidInteractomics_ShinyApp/combinedProbeDatasets_TMT.csv"))  




```

```{r HiddenOriginalDataWrangling, include=FALSE, echo=FALSE}


# gene_names <- read_csv(here("IndividualStudies/DataTables/gene_symbol_results.csv")) |>
#   mutate(
#     gene_name = case_when(
#       gene_symbol == "unnamed protein product [Homo sapiens]" ~ accession,
#       gene_symbol == "unknown [Homo sapiens]" ~ accession,
#       TRUE ~ str_remove(gene_symbol, "\"$")
#     ) 
#   ) |>
#   mutate(Accession = accession) |>
#   dplyr::select(-gene_symbol, -accession) |>
#   glimpse()

# rawData <- readr::read_csv(here("IndividualStudies/DataTables/SK_2024_fullDataset_originalHandoff.csv")) |>
#   dplyr::select(Accession, Description, `Abundance Ratio (log2): (Penta) / (Control)`, `Abundance Ratio Adj. P-Value: (Penta) / (Control)`, `Abundances (Grouped): Control`, `Abundances (Grouped): Penta`) |>
#   rename(logFC = `Abundance Ratio (log2): (Penta) / (Control)`,
#           pvalue = `Abundance Ratio Adj. P-Value: (Penta) / (Control)`,
#          Control_abundance = `Abundances (Grouped): Control`,
#          Penta_abundance = `Abundances (Grouped): Penta`) |>
#   mutate(AveExpr = log2((Control_abundance + Penta_abundance)/2)) |>
#   left_join(gene_names, by = "Accession") |>
#   dplyr::select(gene_name, Accession, Description, logFC, pvalue, AveExpr, Control_abundance, Penta_abundance) |>
#   mutate(hit_annotation = case_when(.default = "no hit",
#                                     logFC >= 2 & pvalue <= 0.05 ~ "enriched hit",
#                                     logFC >= 1 & pvalue < 0.05 ~ "enriched candidate")) |>
#   mutate(LipidProbe = "bf-GPI") |>
#   glimpse()

# write_csv(rawData, here("IndividualStudies/DataTables/SK_2024_ChemEuro.csv"))
  


# library(biomaRt)

# # Try connecting to a mirror
# ensembl <- useEnsembl(biomart = "ensembl", 
#                       dataset = "hsapiens_gene_ensembl",
#                       mirror = "useast")  # or "uswest", "asia"

# # Function to get gene symbol or fallback gene title
# get_gene_symbol <- function(accession) {
#   tryCatch({
#     search <- entrez_search(db = "protein", term = accession)
#     if (length(search$ids) == 0) return(NA)

#     gb_record <- entrez_fetch(db = "protein", id = search$ids[[1]], rettype = "gb", retmode = "text")
#     match <- regmatches(gb_record, regexpr("/gene=\"[^\"]+\"", gb_record))

#     gene <- if (length(match) > 0) {
#       sub("/gene=\"|\"", "", match)
#     } else {
#       summary <- entrez_summary(db = "protein", id = search$ids[[1]])
#       summary$title
#     }

#     return(gene)
#   }, error = function(e) {
#     message("Error with accession ", accession, ": ", e$message)
#     return(NA)
#   })
# }

# # Your vector of accession numbers
# accessions <- pull(rawData, Accession)

# # Path to your CSV results file
# csv_file <- here("IndividualStudies/DataTables/gene_symbol_results.csv")

# # Load previously saved results if the file exists
# if (file.exists(csv_file)) {
#   results <- read.csv(csv_file, stringsAsFactors = FALSE)
#   processed <- results$accession
# } else {
#   results <- data.frame(accession = character(), gene_symbol = character(), stringsAsFactors = FALSE)
#   processed <- character()
# }

# # Iterate through accessions, skipping ones already done
# for (acc in accessions) {
#   if (acc %in% processed) next  # skip if already processed

#   gene <- get_gene_symbol(acc)
#   results <- rbind(results, data.frame(accession = acc, gene_symbol = gene, stringsAsFactors = FALSE))

#   # Save progress after every accession
#   write.csv(results, csv_file, row.names = FALSE)

#   message("Processed: ", acc)
# }

```

```{r ReadingData, echo=FALSE, warning=FALSE, include=FALSE}

data <- readr::read_csv(here::here("IndividualStudies/DataTables/SK_2024_ChemEuro.csv")) |>
  glimpse()

# Organize the hit annotations as factors
data$hit_annotation <- factor(pull(data, hit_annotation), levels = c("enriched hit", "hit", "enriched candidate", "candidate", "no hit", "NA"), ordered = TRUE)

```

## Data visualization

::: {.panel-tabset}


#### Volcano plots

:::{.border}
```{r, echo=FALSE, warning=FALSE}
#| fig-cap: "Volcano plots depict the relative enrichment of each protein versus control (x-axis) and the statistical significance of each protein following a Student's t-test (y-axis, -log10 transformed). The left panel depicts the results of a pulldown using trifunctionalized phosphatidic acid; the right panel depicts the results of the pulldown using trifunctionalized phosphatidylethanolamine. Black proteins are unenriched or depleted in the presence of probe, Purple proteins are enriched to the probe but fall below a Fold-change or p-value threshold of significance (p < 0.05 & logFC > 1), and Orange proteins surpass the threshold of significance (p < 0.05 & logFC > 2)."

VolcanoPlotStandardized(data)

```
:::


#### Ranked-order plots

:::{.border}
```{r, echo=FALSE, warning=FALSE}
#| fig-cap: "Ranked-order plots depict the relative enrichment of each protein versus control (y-axis) from lowest to highest. The left panel depicts the results of a pulldown using trifunctionalized phosphatidic acid; the right panel depicts the results of the pulldown using trifunctionalized phosphatidylethanolamine. Black proteins are unenriched or depleted in the presence of probe, Purple proteins are enriched to the probe but fall below a Fold-change or p-value threshold of significance (p < 0.05 & logFC > 1), and Orange proteins surpass the threshold of significance (p < 0.05 & logFC > 2)."

RankedOrderPlotStandard(data)
```
:::


#### MA Plots

:::{.border}
```{r, echo=FALSE, warning=FALSE}
#| fig-cap: "MA plots depict the average abundance of each protein in the crosslinked and uncrosslinked conditions (x-axis) versus the log2-transformed fold-change between the crosslinked and uncrosslinked conditions (y-axis). Black proteins are unenriched or depleted in the presence of probe, Purple proteins are enriched to the probe but fall below a Fold-change or p-value threshold of significance (p < 0.05 & logFC > 1), and Orange proteins surpass the threshold of significance (p < 0.05 & logFC > 2)."


MAStandard(data)



```

:::
:::


## Data exploration

Check the boxes below to filter the dataset by which lipid probe was used in the pulldown and by significance thresholds.


:::{.border}
```{r, echo=FALSE, warning=FALSE}

# Here is the code to make the filterable lists shown in the crosstalk table below

data <- data |>
  dplyr::select(gene_name, LipidProbe, hit_annotation, logFC, pvalue) |>
  mutate(logFC = signif(logFC, digits=3),
          pvalue = signif(pvalue, digits=3)) |>
  arrange(hit_annotation) |>
  arrange(LipidProbe)

## Creates a reactive dataframe
data_reactive <- crosstalk::SharedData$new(data)

htmltools::tags$div(
  class = "filter-container",
  filter_checkbox(id = "LipidProbe",
                  label = "Lipid probe in pulldown:", 
                  sharedData = data_reactive,
                  group = ~LipidProbe),
  filter_checkbox(id = "hit_annotation",
                  label = "Enrichment criteria:", 
                  sharedData = data_reactive,
                  group = ~hit_annotation)
)

## Displays the reactive dataframe
datatable(data_reactive, 
          caption = "'No hit' proteins are unenriched or depleted in the presence of probe, 'enriched candidates' are defined as proteins with a p-value < 0.05 and a fold-change > 2 (log2FC > 1) for the bf-GPI versus control probe, and 'enriched hits' are defined as proteins with a p-value < 0.05 and a fold change of at least 4-fold (log2FC >2) for the bf-GPI versus control probe", 
          options = list(pageLength = 15),
                         colnames = c("Gene Name", "Lipid Probe", "Hit Annotation", "LogFC", "p value"))

```
:::


## Data download

{{< downloadthis DataTables/SK_2024_ChemEuro.csv dname="SK_2024_ChemEuro_2024">}}
