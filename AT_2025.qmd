---
title: "Thomas et al. 2025"
format: 
  html:
    embed-resources: true
standalone: true
---

<!-- Data overview
Two lipid probes, PA and PE for a single cell line
 -->

## Publication information

**Title:** Trifunctional lipid derivatives: PEâ€™s mitochondrial interactome

**Authors:** Alix Thomas, Rainer Mueller, Ana Kojic, Scotland E. Farley, Frank Stein, Per Haberkant, Carsten Schultz*

(* corresponding: <schulcar@ohsu.edu>{target="_blank"})

**Date published:** 

**Journal, ISSN:** Chemical Communications, 1359-7345, 1364-548X

**DOI:** <https://doi.org/10.1039/D4CC03599B>{target="_blank"}

## Abstract

Phosphatidylethanolamine (PE) is a ubiquitous lipid species in higher eukaryotes which resides preferentially in mitochondria. Here, we synthesized a multifunctionalized PE derivative (1) de-signed to identify PE-binding proteins in intact cells through photo-crosslinking and subsequent isolation and proteomic analysis of the PE-protein conjugates. Due to its aromatic caging group, 1 is initially concentrating in perinuclear membranes. After uncaging, rapid translocation to mitochondria was observed. Hence, the tool is useful for tracking PE location and for determining the PE interactome. A trifunctional phosphatidic acid (PA) derivative in compari-son was rapidly metabolized and is hence more limited in its use.

## Data visualization
 
```{r setup, echo=FALSE, include=FALSE}

## intitialize libraries
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(grid)
library(readr)
library(rmarkdown)
library(emojifont)
library(gt)
library(crosstalk)
library(DT)

## Read the data to a df
AT_2025_data <- readr::read_csv("DataTables/AT_ChemicalCommunications_2025.csv")

## Pivot the data to be longer
AT_2025_Long <- AT_2025_data |>
	pivot_longer(cols = -gene_name,
				names_to = c(".value", "Sample"),
				names_pattern = "^(logFC|pvalue|hit_annotation)_(.+)$")

print(unique(AT_2025_Long$hit_annotation))

# Organize the hit annotations as factors
AT_2025_Long$hit_annotation <- factor(pull(AT_2025_Long, hit_annotation), levels = c("enriched hit", "enriched candidate", "no hit", "NA"), ordered=TRUE)

```

```{r, echo=FALSE, include=FALSE}

ID <- c()
for(i in 0:(nrow(AT_2025_Long)/2)){
	ID[i] = i
}

### The ggplot customizations that make the ranked order plots
AT_2025_ranked_PE <- AT_2025_Long |>
    arrange(logFC) |>
	filter(Sample == "PE") |>
	mutate(ID = ID) 

AT_2025_ranked_PA <- AT_2025_Long |>
    arrange(logFC) |>
	filter(Sample == "PA") |>
	mutate(ID = ID) 

AT_2025_ranked <- rbind(AT_2025_ranked_PE, AT_2025_ranked_PA)

?merge.data.frame()

RankedOrderPlots <- AT_2025_ranked |>
    ggplot(aes(
        x = ID,
        y = logFC,
        color = factor(hit_annotation),
        fill = factor(hit_annotation),
        shape = factor(hit_annotation),
        alpha = factor(hit_annotation),
        size = factor(hit_annotation)
    )) +
    geom_point(aes(text = paste0("Gene name: ", gene_name, "\n",
                                 "LogFC: ", logFC, "\n",
                                 "p-value: ", pvalue, "\n"))) +
    geom_hline(yintercept = 0, linetype = 2) +
    geom_vline(xintercept = 0, linetype = 2) +
    scale_shape_manual(values = c("enriched hit" = 21,
                                  "enriched candidate" = 24,
                                  "no hit" = 22), 
                       name = "Trend") +
    scale_color_manual(values = c("enriched hit" = "black",
                                  "enriched candidate" = "black",
                                  "no hit" = "black"), 
                       name = "Trend") +
    scale_fill_manual(values = c("enriched hit" = "orange",
                                 "enriched candidate" = "purple",
                                 "no hit" = "black"), 
                      name = "Trend") +
    scale_alpha_manual(values = c("enriched hit" = 0.8,
                                  "enriched candidate" = 0.5,
                                  "no hit" = 0.25), 
                       name = "Trend") +
    scale_size_manual(values = c("enriched hit" = 4,
                                 "enriched candidate" = 2,
                                 "no hit" = 0.75), 
                      name = "Trend") +
    facet_wrap(~Sample) +
	ylab("Log2 fold-change") +
	xlab("Ranked-order gene") +
    theme_minimal() +
    theme(panel.border = element_rect(color = "#cfcfcf", fill = NA)) +
    theme(legend.title = element_text(size = 12, face = "bold")) +
    theme(axis.title = element_text(size = 12, face = "bold")) +
    theme(legend.text = element_text(size = 12))

m <- list(l=50, r = 50, b= 100, pad = 4)
	
RankedOrderPlotly <- ggplotly(RankedOrderPlots,
						  tooltip = c("text", dynamicTicks = TRUE),
						  hovermode = "closest",
						  autosize = T,
						  margin = m) |>
				layout(showlegend = FALSE)

```

#### Ranked-order Log2 Fold-change

:::{.border}
```{r, echo=FALSE}
#| fig-cap: "Ranked-order plots depict the relative enrichment of each protein versus control (y-axis) from lowest to highest. The left panel depicts the results of a pulldown using trifunctionalized phosphatidic acid; the right panel depicts the results of the pulldown using trifunctionalized phosphatidylethanolamine. Black proteins are unenriched or depleted in the presence of probe, Purple proteins are enriched to the probe but fall below a FDR or p-value threshold of significance, and Orange proteins surpass the threshold of significance (need details of threshold). "

RankedOrderPlotly
```
:::

```{r, echo=FALSE, include=FALSE}

### The ggplot customizations that make the volcano plots
VolcanoPlots <- AT_2025_Long |>
	ggplot(aes(x = logFC,
			   y = -log10(pvalue),
			   color = factor(hit_annotation), 
			   fill = factor(hit_annotation), 
			   shape = factor(hit_annotation),
			   alpha = factor(hit_annotation),
			   size = factor(hit_annotation))) +
	geom_point(aes(text = paste0("Gene name: ", gene_name, "\n",
								 "LogFC: ", logFC, "\n",
								 "p-value: ", pvalue, "\n"))) +
	geom_hline(yintercept = 0, linetype = 2) +
	geom_vline(xintercept = 0, linetype = 2) +
	scale_x_continuous(limits=c(-1.1 * max(abs(AT_2025_Long$logFC)), 1.1* max(abs(AT_2025_Long$logFC)))) +
    scale_y_continuous(limits=c(0, max(-log10(AT_2025_Long$pvalue)))) +
	scale_shape_manual(values = c("enriched hit" = 21,
								  "enriched candidate" = 24,
								  "no hit" = 22), 
					   name = "Trend") +
	scale_color_manual(values = c("enriched hit" = "black",
								 "enriched candidate" = "black",
								 "no hit" = "black"), 
								 name = "Trend") +
	scale_fill_manual(values = c("enriched hit" = "orange",
								  "enriched candidate" = "purple",
								  "no hit" = "black"), 
					   name = "Trend") +
	scale_alpha_manual(values = c("enriched hit" = 0.8,
								  "enriched candidate" = 0.5,
								  "no hit" = 0.25), 
					   name = "Trend") +
	scale_size_manual(values = c("enriched hit" = 4,
								  "enriched candidate" = 2,
								  "no hit" = 0.75), 
					   name = "Trend") +
	facet_wrap(~Sample) +
	xlab("Log2 fold-change") +
	ylab("-log10(p-value)") +
	theme_minimal() +
	theme(panel.border = element_rect(color = "#cfcfcf", fill = NA))+
	theme(strip.text = element_text(size = 12, face = "bold")) +
	theme(legend.title = element_text(size = 12, face = "bold")) +
	theme(axis.title = element_text(size = 12, face = "bold")) +
	theme(legend.text = element_text(size = 12))

m <- list(l=50, r = 50, b= 100, pad = 10)

VolcanoPlotly <- ggplotly(VolcanoPlots,
						  tooltip = c("text", dynamicTicks = TRUE),
						  hovermode = "closest",
						  autosize = T,
						  margin = m) |>
				layout(showlegend = FALSE)

VolcanoPlotly

```

#### Volcano plots

:::{.border}
```{r, echo=FALSE}
#| fig-cap: "Volcano plots depict the relative enrichment of each protein versus control (x-axis) and the statistical significance of each protein following a Student's t-test (y-axis, -log10 transformed). The left panel depicts the results of a pulldown using trifunctionalized phosphatidic acid; the right panel depicts the results of the pulldown using trifunctionalized phosphatidylethanolamine. Black proteins are unenriched or depleted in the presence of probe, Purple proteins are enriched to the probe but fall below a FDR or p-value threshold of significance, and Orange proteins surpass the threshold of significance (need details of threshold)"

VolcanoPlotly
```
:::

## Enriched proteins

#### Proteins enriched via pulldown with trifunctional phosphatidic acid

:::{.border}
```{r, echo=FALSE}
### Here is the code to make the filterable lists shown in the crosstalk table below

# Creates a reactive dataframe
AT_2025_Long_reactive <- crosstalk::SharedData$new(AT_2025_Long)


filter_select(id = "Sample",
				label = "Functional probe used in pulldown:", 
				sharedData = AT_2025_Long_reactive,
				group = ~Sample)

filter_select(id = "hit_annotation",
				label = "Enrichment criteria:", 
				sharedData = AT_2025_Long_reactive,
				group = ~hit_annotation)

datatable(AT_2025_Long_reactive)

```
:::

## Data download

{{< downloadthis DataTables/AT_ChemicalCommunications_2025.csv dname="AT_ChemicalCommunications_2025">}}


